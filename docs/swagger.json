{
    "components": {
        "schemas": {
            "UserResponse": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "firstName": {
                        "type": "string"
                    },
                    "lastName": {
                        "type": "string"
                    },
                    "followers": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "followings": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "posts": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "bio": {
                        "type": "string"
                    },
                    "avatar": {
                        "type": "string"
                    },
                    "verified": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "username",
                    "email",
                    "firstName",
                    "lastName",
                    "followers",
                    "followings",
                    "posts",
                    "bio",
                    "avatar",
                    "verified"
                ]
            },
            "UserSearchResponse": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string"
                    },
                    "firstName": {
                        "type": "string"
                    },
                    "lastName": {
                        "type": "string"
                    },
                    "avatar": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "username",
                    "firstName",
                    "lastName",
                    "avatar"
                ]
            },
            "UserProfileResponse": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string"
                    },
                    "firstName": {
                        "type": "string"
                    },
                    "lastName": {
                        "type": "string"
                    },
                    "followers": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "followings": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "posts": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "bio": {
                        "type": "string"
                    },
                    "avatar": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "username",
                    "firstName",
                    "lastName",
                    "followers",
                    "followings",
                    "posts",
                    "bio",
                    "avatar"
                ]
            },
            "UploadAvatarResponse": {
                "properties": {
                    "fileId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "fileId"
                ]
            },
            "PostResponse": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "user": {
                        "type": "string"
                    },
                    "content": {
                        "type": "string"
                    },
                    "likes": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "comments": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "image": {
                        "type": "string"
                    },
                    "createdAt": {
                        "oneOf": [
                            {
                                "format": "date",
                                "type": "string"
                            },
                            {
                                "format": "date-time",
                                "type": "string"
                            }
                        ]
                    },
                    "updatedAt": {
                        "oneOf": [
                            {
                                "format": "date",
                                "type": "string"
                            },
                            {
                                "format": "date-time",
                                "type": "string"
                            }
                        ]
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "user",
                    "content",
                    "likes",
                    "comments",
                    "image",
                    "createdAt",
                    "updatedAt"
                ]
            },
            "CommentResponse": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "user": {
                        "type": "string"
                    },
                    "post": {
                        "type": "string"
                    },
                    "content": {
                        "type": "string"
                    },
                    "likes": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "replies": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "replyTo": {
                        "type": "string"
                    },
                    "createdAt": {
                        "oneOf": [
                            {
                                "format": "date",
                                "type": "string"
                            },
                            {
                                "format": "date-time",
                                "type": "string"
                            }
                        ]
                    },
                    "updatedAt": {
                        "oneOf": [
                            {
                                "format": "date",
                                "type": "string"
                            },
                            {
                                "format": "date-time",
                                "type": "string"
                            }
                        ]
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "user",
                    "post",
                    "content",
                    "likes",
                    "replies",
                    "replyTo",
                    "createdAt",
                    "updatedAt"
                ]
            },
            "Pagination": {
                "properties": {
                    "limit": {
                        "type": "number"
                    },
                    "lastDocumentId": {
                        "pattern": "^[0-9a-fA-F]{24}$",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "SignupRequest": {
                "properties": {
                    "username": {
                        "type": "string",
                        "maxLength": 20,
                        "minLength": 2
                    },
                    "password": {
                        "type": "string"
                    },
                    "email": {
                        "format": "email",
                        "type": "string"
                    },
                    "firstName": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1
                    },
                    "lastName": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1
                    }
                },
                "type": "object",
                "required": [
                    "username",
                    "password",
                    "email",
                    "firstName",
                    "lastName"
                ]
            },
            "LoginRequest": {
                "properties": {
                    "userIdentifier": {
                        "type": "string",
                        "minLength": 1
                    },
                    "password": {
                        "type": "string",
                        "minLength": 1
                    }
                },
                "type": "object",
                "required": [
                    "userIdentifier",
                    "password"
                ]
            },
            "PasswordResetRequest": {
                "properties": {
                    "token": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "token",
                    "password"
                ]
            },
            "PasswordUpdateRequest": {
                "properties": {
                    "currentPassword": {
                        "type": "string",
                        "minLength": 1
                    },
                    "newPassword": {
                        "type": "string"
                    },
                    "terminateAllSessions": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "currentPassword",
                    "newPassword"
                ]
            },
            "ProfileEditRequest": {
                "properties": {
                    "firstName": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1
                    },
                    "lastName": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1
                    },
                    "bio": {
                        "type": "string",
                        "maxLength": 200
                    }
                },
                "type": "object"
            },
            "SubmitPostRequest": {
                "properties": {
                    "content": {
                        "type": "string",
                        "maxLength": 3000,
                        "minLength": 15
                    }
                },
                "type": "object",
                "required": [
                    "content"
                ]
            },
            "CommentOnPostRequest": {
                "properties": {
                    "content": {
                        "type": "string",
                        "maxLength": 1000,
                        "minLength": 5
                    }
                },
                "type": "object",
                "required": [
                    "content"
                ]
            }
        }
    },
    "info": {
        "title": "SocialApp API",
        "version": "1.0.0",
        "description": "Generated with `routing-controllers-openapi`"
    },
    "openapi": "3.0.0",
    "paths": {
        "/users/search": {
            "get": {
                "operationId": "UserController.searchUsersByUsername",
                "parameters": [
                    {
                        "in": "query",
                        "name": "usernameQuery",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "in": "query",
                        "name": "lastDocumentId",
                        "schema": {
                            "pattern": "^[0-9a-fA-F]{24}$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/UserSearchResponse"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": ""
                    }
                },
                "summary": "Search for users by username",
                "tags": [
                    "User"
                ],
                "description": "\n    usernameQuery: query to search for users by username.\n    limit: limit of documents to return, default is 5.\n    lastDocumentId: id of the last document in the previous page, if not provided, it will return the first page.",
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/users/": {
            "get": {
                "operationId": "UserController.getUserByUsername",
                "parameters": [
                    {
                        "in": "query",
                        "name": "username",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserResponse"
                                }
                            }
                        },
                        "description": ""
                    }
                },
                "summary": "Get user by username",
                "tags": [
                    "User"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/users/{id}/follow": {
            "post": {
                "operationId": "UserController.followUser",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "pattern": "[^\\/#\\?]+?",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {}
                        },
                        "description": "Successful response"
                    }
                },
                "summary": "Follow a user",
                "tags": [
                    "User"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/users/{id}/unfollow": {
            "post": {
                "operationId": "UserController.unfollowUser",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "pattern": "[^\\/#\\?]+?",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {}
                        },
                        "description": "Successful response"
                    }
                },
                "summary": "Unfollow a user",
                "tags": [
                    "User"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/users/followers": {
            "get": {
                "operationId": "UserController.getFollowers",
                "parameters": [
                    {
                        "in": "query",
                        "name": "userId",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "in": "query",
                        "name": "lastDocumentId",
                        "schema": {
                            "pattern": "^[0-9a-fA-F]{24}$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/UserSearchResponse"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": ""
                    }
                },
                "summary": "Get list of followers",
                "tags": [
                    "User"
                ],
                "description": "\n    userId: id of the user to get followers for, if not provided, it will return the current user's followers.\n    limit: limit of documents to return, default is 5.\n    lastDocumentId: id of the last document in the previous page, if not provided, it will return the first page.\n    ",
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/users/followings": {
            "get": {
                "operationId": "UserController.getFollowings",
                "parameters": [
                    {
                        "in": "query",
                        "name": "userId",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "in": "query",
                        "name": "lastDocumentId",
                        "schema": {
                            "pattern": "^[0-9a-fA-F]{24}$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/UserSearchResponse"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": ""
                    }
                },
                "summary": "Get list of followings",
                "tags": [
                    "User"
                ],
                "description": "\n    userId: id of the user to get followings for, if not provided, it will return the current user's followings.\n    limit: limit of documents to return, default is 5.\n    lastDocumentId: id of the last document in the previous page, if not provided, it will return the first page.\n      ",
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/users/avatar": {
            "post": {
                "operationId": "UserController.uploadAvatar",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UploadAvatarResponse"
                                }
                            }
                        },
                        "description": ""
                    }
                },
                "summary": "Update avatar",
                "tags": [
                    "User"
                ],
                "description": "\n    Update avatar by uploading a new profile picture.\n    This API endpoint is not supported here. Follow the below steps to submit a succesful request using Postman:\n     1. Open Postman and create a new HTTP Post request.\n     2. Enter the following url: 'http://localhost:3030/users/avatar'.\n     3. Set the body as form-data and add a field with the key 'avatar' of type File.\n     4. Select the file to upload as a profile picture.\n     5. Submit the request to update the avatar.\n    Maximum file size is 0.5 MB and allowed types are jpg, jpeg, and png.\n    ",
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "operationId": "UserController.deleteAvatar",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {}
                        },
                        "description": "Successful response"
                    }
                },
                "summary": "Delete avatar",
                "tags": [
                    "User"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/users/profile": {
            "patch": {
                "operationId": "UserController.updateProfile",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProfileEditRequest"
                            }
                        }
                    },
                    "description": "ProfileEditRequest",
                    "required": false
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserProfileResponse"
                                }
                            }
                        },
                        "description": ""
                    }
                },
                "summary": "Edit profile",
                "tags": [
                    "User"
                ],
                "description": "\n    First name, last name, and bio are optional.\n    Maximum length for first name and last name is 50 characters.\n    Maximum length for bio is 200 characters.\n    ",
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/posts/": {
            "post": {
                "operationId": "PostController.submitPost",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SubmitPostRequest"
                            }
                        }
                    },
                    "description": "SubmitPostRequest",
                    "required": false
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PostResponse"
                                }
                            }
                        },
                        "description": ""
                    }
                },
                "summary": "Submit a post",
                "tags": [
                    "Post"
                ],
                "description": "\n    Submit a post with an optional image.\n    Minimum length of content is 15 characters and maximum is 3000 characters.\n    To submit an image, use Postman and send a multipart/form-data request with a file field with the key 'image'.\n    The image must be of type png, jpg or jpeg and must not exceed 1MB in size.\n    ",
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "get": {
                "operationId": "PostController.getTimelinePosts",
                "parameters": [
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "in": "query",
                        "name": "lastDocumentId",
                        "schema": {
                            "pattern": "^[0-9a-fA-F]{24}$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/PostResponse"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": ""
                    }
                },
                "summary": "Get timeline posts",
                "tags": [
                    "Post"
                ],
                "description": "\n    Get a list of posts of the users that the current user is following.\n    The posts are paginated and sorted in descending order of creation date.\n    limit: limit of documents to return, default is 5.\n    lastDocumentId: id of the last document in the previous page. If not provided, it will return the first page.\n    ",
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/posts/{postId}": {
            "patch": {
                "operationId": "PostController.updatePost",
                "parameters": [
                    {
                        "in": "path",
                        "name": "postId",
                        "required": true,
                        "schema": {
                            "pattern": "[^\\/#\\?]+?",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SubmitPostRequest"
                            }
                        }
                    },
                    "description": "SubmitPostRequest",
                    "required": false
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {}
                        },
                        "description": "Successful response"
                    }
                },
                "summary": "Update a post",
                "tags": [
                    "Post"
                ],
                "description": "\n    Update the content of a post.\n    Minimum length of content is 15 characters and maximum is 3000 characters.\n    Updating the content is allowed within 1 hour of submitting the post.\n    ",
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "operationId": "PostController.deletePost",
                "parameters": [
                    {
                        "in": "path",
                        "name": "postId",
                        "required": true,
                        "schema": {
                            "pattern": "[^\\/#\\?]+?",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {}
                        },
                        "description": "Successful response"
                    }
                },
                "summary": "Delete a post",
                "tags": [
                    "Post"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/posts/{postId}/like": {
            "post": {
                "operationId": "PostController.likePost",
                "parameters": [
                    {
                        "in": "path",
                        "name": "postId",
                        "required": true,
                        "schema": {
                            "pattern": "[^\\/#\\?]+?",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {}
                        },
                        "description": "Successful response"
                    }
                },
                "summary": "Like a post",
                "tags": [
                    "Post"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/posts/{postId}/comment": {
            "post": {
                "operationId": "PostController.commentOnPost",
                "parameters": [
                    {
                        "in": "path",
                        "name": "postId",
                        "required": true,
                        "schema": {
                            "pattern": "[^\\/#\\?]+?",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CommentOnPostRequest"
                            }
                        }
                    },
                    "description": "CommentOnPostRequest",
                    "required": false
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CommentResponse"
                                }
                            }
                        },
                        "description": ""
                    }
                },
                "summary": "Comment on a post",
                "tags": [
                    "Post"
                ],
                "description": "\n    Submit a comment on a post.\n    Minimum length of content is 5 characters and maximum is 1000 characters.\n    ",
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/posts/{userId}": {
            "get": {
                "operationId": "PostController.getUserPosts",
                "parameters": [
                    {
                        "in": "path",
                        "name": "userId",
                        "required": true,
                        "schema": {
                            "pattern": "[^\\/#\\?]+?",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "in": "query",
                        "name": "lastDocumentId",
                        "schema": {
                            "pattern": "^[0-9a-fA-F]{24}$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/PostResponse"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": ""
                    }
                },
                "summary": "Get user posts",
                "tags": [
                    "Post"
                ],
                "description": "\n    Get a list of posts of a user.\n    The posts are paginated and sorted in descending order of creation date.\n    limit: limit of documents to return, default is 5.\n    lastDocumentId: id of the last document in the previous page. If not provided, it will return the first page.\n    ",
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/files/": {
            "get": {
                "operationId": "FileController.getFile",
                "parameters": [
                    {
                        "in": "query",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {}
                        },
                        "description": "Successful response"
                    }
                },
                "summary": "Get a file by id",
                "tags": [
                    "File"
                ],
                "description": "\n    This endpoint serves as a proxy to get a file from AWS S3 by redirecting the user to a signed URL.\n    This is done to prevent exposing the AWS S3 bucket URL to the client.\n    This endpoint is not supported by Swagger UI. To get a file, use the following URL in your browser:\n    http://localhost:3030/files?id=<fileId>\n    The 'avatar' field in the user object and the 'image' field in the post object hold a file ID.\n    ",
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/comments/{commentId}": {
            "patch": {
                "operationId": "CommentController.updateComment",
                "parameters": [
                    {
                        "in": "path",
                        "name": "commentId",
                        "required": true,
                        "schema": {
                            "pattern": "[^\\/#\\?]+?",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CommentOnPostRequest"
                            }
                        }
                    },
                    "description": "CommentOnPostRequest",
                    "required": false
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CommentResponse"
                                }
                            }
                        },
                        "description": ""
                    }
                },
                "summary": "Update a comment",
                "tags": [
                    "Comment"
                ],
                "description": "\n    Update the content of a comment.\n    Minimum length of content is 5 characters and maximum is 1000 characters.\n    Updating the content is allowed within 30 minutes of submission.\n    ",
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "operationId": "CommentController.deleteComment",
                "parameters": [
                    {
                        "in": "path",
                        "name": "commentId",
                        "required": true,
                        "schema": {
                            "pattern": "[^\\/#\\?]+?",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {}
                        },
                        "description": "Successful response"
                    }
                },
                "summary": "Delete a comment",
                "tags": [
                    "Comment"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/comments/{commentId}/like": {
            "post": {
                "operationId": "CommentController.likeComment",
                "parameters": [
                    {
                        "in": "path",
                        "name": "commentId",
                        "required": true,
                        "schema": {
                            "pattern": "[^\\/#\\?]+?",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {}
                        },
                        "description": "Successful response"
                    }
                },
                "summary": "Like a comment",
                "tags": [
                    "Comment"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/comments/{commentId}/reply": {
            "post": {
                "operationId": "CommentController.replyToComment",
                "parameters": [
                    {
                        "in": "path",
                        "name": "commentId",
                        "required": true,
                        "schema": {
                            "pattern": "[^\\/#\\?]+?",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CommentOnPostRequest"
                            }
                        }
                    },
                    "description": "CommentOnPostRequest",
                    "required": false
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CommentResponse"
                                }
                            }
                        },
                        "description": ""
                    }
                },
                "summary": "Reply to a comment",
                "tags": [
                    "Comment"
                ],
                "description": "\n    Submit a reply to a comment.\n    Minimum length of content is 5 characters and maximum is 1000 characters.\n    User can't reply to a comment that is a reply to another comment.\n    ",
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/comments/": {
            "get": {
                "operationId": "CommentController.getPostComments",
                "parameters": [
                    {
                        "in": "query",
                        "name": "postId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "in": "query",
                        "name": "lastDocumentId",
                        "schema": {
                            "pattern": "^[0-9a-fA-F]{24}$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CommentResponse"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": ""
                    }
                },
                "summary": "Get comments of a post",
                "tags": [
                    "Comment"
                ],
                "description": "\n    Get comments of a post paginated and sorted by the creation date in ascending order.\n    limit: limit of documents to return, default is 5.\n    lastDocumentId: id of the last document in the previous page. If not provided, it will return the first page.\n    ",
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/comments/{commentId}/replies": {
            "get": {
                "operationId": "CommentController.getCommentReplies",
                "parameters": [
                    {
                        "in": "path",
                        "name": "commentId",
                        "required": true,
                        "schema": {
                            "pattern": "[^\\/#\\?]+?",
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "in": "query",
                        "name": "lastDocumentId",
                        "schema": {
                            "pattern": "^[0-9a-fA-F]{24}$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CommentResponse"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": ""
                    }
                },
                "summary": "Get replies of a comment",
                "tags": [
                    "Comment"
                ],
                "description": "\n    Get replies of a comment paginated and sorted by the creation date in ascending order.\n    limit: limit of documents to return, default is 5.\n    lastDocumentId: id of the last document in the previous page. If not provided, it will return the first page.\n    ",
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/auth/signup": {
            "post": {
                "operationId": "AuthController.signup",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SignupRequest"
                            }
                        }
                    },
                    "description": "SignupRequest",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserResponse"
                                }
                            }
                        },
                        "description": ""
                    }
                },
                "summary": "Sign up user",
                "tags": [
                    "Auth"
                ],
                "description": "\n    Registers a user with given credentials and sends a verification email that is valid for 24 hours. \n    It also auto-authenticates the user by generating and setting access and refresh tokens as cookies. \n    Unverified users can only access /auth/logout and /auth/user out of the protected endpoints.\n    Body parameters criteria are as follows:\n      Username: 2 to 20 characters, unique, and follow the specified format:\n        * Starts with a letter and ends with a letter or number.\n        * Contains only letters, numbers, hyphens, underscores, or periods.\n        * Does not contain consecutive hyphens, underscores, or periods.\n      Password: Minimum 8 characters, Should contain at least:\n        * One uppercase letter.\n        * One lowercase letter.\n        * One number.\n        * One special character.\n      Email: Must be a valid and unique email address.\n      First name: Up to 50 characters.\n      Last name: Up to 50 characters.\n    "
            }
        },
        "/auth/login": {
            "post": {
                "operationId": "AuthController.login",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LoginRequest"
                            }
                        }
                    },
                    "description": "LoginRequest",
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserResponse"
                                }
                            }
                        },
                        "description": ""
                    }
                },
                "summary": "Authenticate user",
                "tags": [
                    "Auth"
                ],
                "description": "\n    Authenticates a user using either a username or email. This generates access and refresh tokens, set as cookies. \n    Users have limited access until email verification.  \n    Access tokens are verified on protected endpoint access. \n      Access token expires in 1 hour and refresh token expires in 24 hours.\n      Expired access tokens trigger refresh token rotation and new access token generation.\n      Inactivity for 24 hours triggers automatic logout.\n    "
            }
        },
        "/auth/logout": {
            "get": {
                "operationId": "AuthController.logout",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {}
                        },
                        "description": "Successful response"
                    }
                },
                "summary": "Sign out user",
                "tags": [
                    "Auth"
                ],
                "description": "\n    Signs out a user by invalidating the access and refresh tokens.\n    Tokens are invalidated by adding them to the token denylist and clearing the cookies.\n    ",
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/auth/email/verify": {
            "put": {
                "operationId": "AuthController.verifyEmail",
                "parameters": [
                    {
                        "in": "query",
                        "name": "token",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {}
                        },
                        "description": "Successful response"
                    }
                },
                "summary": "Verify email address",
                "tags": [
                    "Auth"
                ]
            }
        },
        "/auth/password": {
            "get": {
                "operationId": "AuthController.requestPasswordReset",
                "parameters": [
                    {
                        "in": "query",
                        "name": "email",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {}
                        },
                        "description": "Successful response"
                    }
                },
                "summary": "Send password reset link",
                "tags": [
                    "Auth"
                ],
                "description": "\n    Sends a password reset link to the user's email address.\n    The link is valid for 6 hours.\n    "
            },
            "post": {
                "operationId": "AuthController.resetPassword",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PasswordResetRequest"
                            }
                        }
                    },
                    "description": "PasswordResetRequest",
                    "required": false
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {}
                        },
                        "description": "Successful response"
                    }
                },
                "summary": "Reset user's password",
                "tags": [
                    "Auth"
                ],
                "description": "\n    Resets a user's password using the password reset token. All sessions are terminated after password reset.\n    "
            },
            "put": {
                "operationId": "AuthController.updatePassword",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PasswordUpdateRequest"
                            }
                        }
                    },
                    "description": "PasswordUpdateRequest",
                    "required": false
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {}
                        },
                        "description": "Successful response"
                    }
                },
                "summary": "Update user's password",
                "tags": [
                    "Auth"
                ],
                "description": "\n    Updates a user's password and terminates all sessions if terminateAllSessions is true.\n    ",
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/auth/user": {
            "get": {
                "operationId": "AuthController.getAuthenticatedUser",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserResponse"
                                }
                            }
                        },
                        "description": ""
                    }
                },
                "summary": "Get authenticated user's info",
                "tags": [
                    "Auth"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        }
    }
}